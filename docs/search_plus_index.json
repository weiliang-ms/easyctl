{"./":{"url":"./","title":"Introduction","keywords":"","body":"Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"-安装文档/":{"url":"-安装文档/","title":"-安装文档","keywords":"","body":"安装easyctl 编译安装最新版 git clone https://github.com/weiliang-ms/easyctl.git cd easyctl go build -ldflags \"-w -s\" -o /usr/local/bin/easyctl 下载latest release版本 Mac OS sudo tar zxvf easyctl-*-darwin-amd64.tar.gz sudo cp easyctl /usr/local/bin linux-amd64 sudo tar zxvf easyctl-*-linux-amd64.tar.gz sudo cp easyctl /usr/local/bin Windows 下载tag版本 tag列表 Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"加固指令集/加固操作系统.html":{"url":"加固指令集/加固操作系统.html","title":"加固操作系统","keywords":"","body":"操作系统加固 前置条件： 安装easyctl 版本支持：v0.7.12-alpha以上 加固内容参考说明文档 适用平台： [x] CentOS7 [?] CentOS6 暂未测试，理论上兼容，欢迎使用测试。 使用 1.生成配置文件 $ easyctl harden os INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 2.调整配置 vi config.yaml，调整以下参数 server主机信息（用于做安全加固的主机） server: - host: 10.10.10.[1:40] # 地址段 username: root privateKeyPath: \"\" # ~/.ssh/id_rsa，为空默认走password登录；不为空默认走密钥登录 password: 123456 port: 22 excludes: - 192.168.235.132 # 用于排除地址区间内的元素 3.执行加固 $ easyctl harden os -c config.yaml --debug 结果输出如下： $ easyctl harden os -c config.yaml [easyctl] localhost.localdomain | 2021-10-11T04:56:35-04:00 | info | [step 1] 禁ping [easyctl] localhost.localdomain | 2021-10-11T04:56:35-04:00 | info | 解析server列表完毕! [easyctl] localhost.localdomain | 2021-10-11T04:56:35-04:00 | info | 开始并行执行命令... [easyctl] localhost.localdomain | 2021-10-11T04:56:35-04:00 | info | [192.168.109.137] 开始执行指令 -> shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:35-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:35-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:36-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:36-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:36-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:36-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:37-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:37-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:37-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:37-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:38-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:38-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:38-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:38-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:39-04:00 | info | shell content [easyctl] localhost.localdomain | 2021-10-11T04:56:40-04:00 | info | 4.加固后的主机如何登录？ 根据上述返回信息，使用以下用户及端口登录 ssh端口: 22122 ssh用户: easyctl ssh密码: YR4H0x*3wVyfyd easyctl用户具有sudo权限，建议变更easyctl用户口令 说明文档 加固以下以下事项： 禁Ping sed -i \"/net.ipv4.icmp_echo_ignore_all/d\" /etc/sysctl.conf echo \"net.ipv4.icmp_echo_ignore_all=1\" >> /etc/sysctl.conf sysctl -p 2.关闭ICMP_TIMESTAMP应答 iptables -I INPUT -p ICMP --icmp-type timestamp-request -m comment --comment \"deny ICMP timestamp\" -j DROP || true iptables -I INPUT -p ICMP --icmp-type timestamp-reply -m comment --comment \"deny ICMP timestamp\" -j DROP || true 设置系统空闲等待时间 sed -i '/export TMOUT=300/d' /etc/profile sed -i '/readonly TMOUT/d' /etc/profile echo \"export TMOUT=300\" >> /etc/profile echo \"readonly TMOUT\" >> /etc/profile 隐藏系统版本信息 mv /etc/issue /etc/issue.bak || true mv /etc/issue.net /etc/issue.net.bak || true 5.禁止Control-Alt-Delete键盘重启系统命令 rm -rf /usr/lib/systemd/system/ctrl-alt-del.target || true 6ssh用户密码加固 PASS_MAX_DAYS=$(grep -e ^PASS_MAX_DAYS /etc/login.defs |awk '{print $2}') if [ $PASS_MAX_DAYS -gt 90 ];then echo \"密码最长保留期限为：$PASS_MAX_DAYS, 更改为90天\" sed -i \"/^PASS_MAX_DAYS/d\" /etc/login.defs echo \"PASS_MAX_DAYS 90\" >> /etc/login.defs fi PASS_MIN_DAYS=$(grep -e ^PASS_MIN_DAYS /etc/login.defs |awk '{print $2}') if [ $PASS_MIN_DAYS -ne 0 ];then echo \"密码最段保留期限为：$PASS_MIN_DAYS, 更改为1天\" sed -i \"/^PASS_MIN_DAYS/d\" /etc/login.defs echo \"PASS_MIN_DAYS 0\" >> /etc/login.defs fi PASS_MIN_LEN=$(grep -e ^PASS_MIN_LEN /etc/login.defs |awk '{print $2}') if [ $PASS_MIN_LEN -lt 8 ];then echo \"密码最少字符为：$PASS_MIN_LEN, 更改为8\" sed -i \"/^PASS_MIN_LEN/d\" /etc/login.defs echo \"PASS_MIN_LEN 8\" >> /etc/login.defs fi PASS_WARN_AGE=$(grep -e ^PASS_WARN_AGE /etc/login.defs |awk '{print $2}') if [ $PASS_WARN_AGE -ne 7 ];then echo \"密码到期前$PASS_MIN_LEN天提醒, 更改为7\" sed -i \"/^PASS_WARN_AGE/d\" /etc/login.defs echo \"PASS_WARN_AGE 7\" >> /etc/login.defs fi 删除系统默认用户 users=(adm lp sync shutdown halt mail news uucp operator games gopher ftp) for i in ${users[@]}; do userdel $i &>/dev/null || true done for i in ${users[@]}; do userdel $i &>/dev/null || true done 修改允许密码错误次数 sed -i \"/MaxAuthTries/d\" /etc/ssh/sshd_config echo \"MaxAuthTries 3\" >> /etc/ssh/sshd_config service sshd restart 关闭ssh UseDNS sed -i \"/UseDNS/d\" /etc/ssh/sshd_config echo \"UseDNS no\" >> /etc/ssh/sshd_config service sshd restart 关闭ssh的AgentForwarding和TcpForwarding sed -i \"/AgentForwarding/d\" /etc/ssh/sshd_config sed -i \"/TcpForwarding/d\" /etc/ssh/sshd_config echo \"AllowAgentForwarding no\" >> /etc/ssh/sshd_config echo \"AllowTcpForwarding no\" >> /etc/ssh/sshd_config service sshd restart 加固系统日志文件 touch /var/log/secure chown root:root /var/log/secure chmod 600 /var/log/secure 删除非root用户定时任务 rm -f /etc/cron.deny 定时清理僵尸进程 crontab -l | grep -v '#' > /tmp/file1 echo \"0 3 * * * ps -A -ostat,ppid | grep -e '^[Zz]' | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1\" >> /tmp/file1 && awk ' !x[$0]++{print > \"/tmp/file1\"}' /tmp/file1 crontab /tmp/file1 创建sudo用户 chattr -i /etc/passwd /etc/shadow /etc/group /etc/gshadow /etc/inittab useradd -m easyctl &>/dev/null || true echo YR4H0x*3wVyfyd | passwd --stdin easyctl || true sed -i '/easyctl/d' /etc/sudoers echo \"easyctl ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers 锁定敏感文件并降权 chown root:root /etc/{passwd,shadow,group} chmod 644 /etc/{passwd,group} chmod 400 /etc/shadow chattr +i /etc/services || true chattr +i /etc/passwd /etc/shadow /etc/group /etc/gshadow /etc/inittab 修改ssh port& 禁止root登录 sed -i \"/PermitRootLogin/d\" /etc/ssh/sshd_config sed -i \"/Port 22/d\" /etc/ssh/sshd_config echo \"Port 22122\" >> /etc/ssh/sshd_config echo \"PermitRootLogin no\" >> /etc/ssh/sshd_config setenforce 0 firewall-cmd --zone=public --add-port=22122/tcp --permanent || true firewall-cmd --zone=public --add-port=22122/tcp --permanent || true firewall-cmd --reload || true iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 22122 -j ACCEPT || true /etc/rc.d/init.d/iptables save || ture service iptables restart || ture service sshd restart Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"启动指令集/添加配额启动程序.html":{"url":"启动指令集/添加配额启动程序.html","title":"添加配额启动程序","keywords":"","body":"为程序添加配额 前置条件： 安装easyctl 版本支持：v0.7.14-alpha以上 验证性内容参考-测试说明部分 适用平台： [x] CentOS7 [?] CentOS6 暂未测试，不建议使用 可限制配额资源: [x] 内存 [x] cpu [ ] 网络 [ ] 磁盘 实现原理：核心原理基于linux cgroups（cgroups 封装实现），流程如下： 通过boot-app.app-name（服务名称）字段创建控制组 通过boot-app.resources.limits（资源限制）字段创建控制组子系统（内存、cpu、io等） 通过boot-app.boot-cmd（启动命令）字段启动程序，并获取进程id 将进程id添加至控制组内 参数说明 boot-app.app-name: 服务名称，用于关联控制组名称。同一主机上该字段不可重复。 boot-app.boot-cmd: 程序启动命令 boot-app.resources.limits.cpu: CPU限额，可申请vCore数量，正整数字段。（设置为0或不设置，表示不限制） boot-app.resources.limits.memory: CPU限额，可申请vCore数量，可选单位：GB、MB。（设置为0或不设置，表示不限制） 使用 1.生成配置文件 $ easyctl boot app-with-cgroups INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 2.调整配置 vi config.yaml，调整以下参数 boot-app.app-name: 服务名称，用于关联控制组名称。同一主机上该字段不可重复。 boot-app.boot-cmd: 程序启动命令 boot-app.resources.limits.cpu: CPU限额，可申请vCore数量，正整数字段。（设置为0或不设置，表示不限制） boot-app.resources.limits.memory: CPU限额，可申请vCore数量，可选单位：GB、MB。（设置为0或不设置，表示不限制） boot-app: - app-name: eureka-app boot-cmd: nohup /usr/bin/java -jar eureka.jar &> /dev/null & resources: limits: cpu: 2 memory: 3GB 3.执行启动 $ easyctl boot app-with-cgroups -c config.yaml --debug 4.确认配额是否合法(OOM等会有Kill信息) $ sudo journalctl -xef 测试说明 针对配额内容进行验证性测试 测试CPU限额 实现原理：基于控制组cpu.cfs_period_us与cpu.cfs_quota_us实现对CPU的强限制 注： 高级/自定义设置建议使用原生cgroups A.测试用例1: 配额1vCore申请1vCore boot-app: - app-name: app1 boot-cmd: stress --cpu 1 --vm 1 --vm-bytes 2G --vm-hang 120 --timeout 120s resources: limits: cpu: 1 memory: 3GB 执行 easyctl boot app-with-cgroups -c config.yaml top观测 PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 221208 root 20 0 7312 100 0 R 99.7 0.0 0:29.00 stress 290 root 20 0 0 0 0 S 0.3 0.0 0:00.01 ksoftirqd/56 ... 证明限制生效 B.测试用例2: 配额1vCore申请2vCore boot-app: - app-name: app1 boot-cmd: stress --cpu 2 --vm 2 --vm-bytes 2G --vm-hang 120 --timeout 120s resources: limits: cpu: 1 memory: 3GB 执行 easyctl boot app-with-cgroups -c config.yaml top观测 PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 222430 root 20 0 7312 100 0 R 49.5 0.0 0:03.34 stress 222428 root 20 0 7312 100 0 R 49.2 0.0 0:03.29 stress ... 配额为1vCore的情况下，若申请2个vCore，两个线程将均分1vCore使用时间（50%） C.测试用例3: 配额2vCore申请1vCore boot-app: - app-name: app1 boot-cmd: stress --cpu 1 --vm 2 --vm-bytes 2G --vm-hang 120 --timeout 120s resources: limits: cpu: 2 memory: 3GB 执行 easyctl boot app-with-cgroups -c config.yaml top观测 PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 223488 root 20 0 7312 100 0 R 99.7 0.0 0:07.42 stress ... D.测试用例4: 配额4vCore申请4vCore boot-app: - app-name: app1 boot-cmd: stress --cpu 4 --vm 2 --vm-bytes 2G --vm-hang 120 --timeout 120s resources: limits: cpu: 4 memory: 3GB 执行 easyctl boot app-with-cgroups -c config.yaml top观测 PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 224362 root 20 0 7312 100 0 R 99.7 0.0 0:09.68 stress 224364 root 20 0 7312 100 0 R 99.7 0.0 0:09.69 stress 224365 root 20 0 7312 100 0 R 99.7 0.0 0:09.69 stress 224366 root 20 0 7312 100 0 R 99.7 0.0 0:09.69 stress ... E.测试用例5: 不限制cpu配额 boot-app: - app-name: app1 boot-cmd: stress --cpu 4 --vm 2 --vm-bytes 2G --vm-hang 120 --timeout 120s resources: limits: memory: 3GB 执行 easyctl boot app-with-cgroups -c config.yaml top观测 PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 239180 root 20 0 7312 100 0 R 100.0 0.0 0:11.01 stress 239177 root 20 0 7312 100 0 R 99.7 0.0 0:11.00 stress 239181 root 20 0 7312 100 0 R 99.7 0.0 0:11.01 stress 239182 root 20 0 7312 100 0 R 99.7 0.0 0:11.01 stress ... 测试内存限额 实现原理：基于控制组memory.limit_in_bytes内存配置字段实现 注： 高级/自定义设置建议使用原生cgroups A.测试用例1: 配额1GB申请512M boot-app: - app-name: app1 boot-cmd: stress --vm 1 --vm-bytes 512M --vm-hang 120 --timeout 120s resources: limits: memory: 1GB 执行 $ easyctl boot app-with-cgroups -c config.yaml --debug [easyctl] localhost.localdomain | 2021-10-25T04:51:21-04:00 | info | 启动命令: stress --vm 1 --vm-bytes 512M --vm-hang 120 --timeout 120s, 进程id: 244051 [easyctl] localhost.localdomain | 2021-10-25T04:51:21-04:00 | info | 限制程序配额 -> CPU: 0核, 内存: 1GB [easyctl] localhost.localdomain | 2021-10-25T04:51:21-04:00 | info | 创建cpu子系统: /sys/fs/cgroup/cpu/app1 memory子系统: /sys/fs/cgroup/memory/app1 [easyctl] localhost.localdomain | 2021-10-25T04:51:21-04:00 | debug | 0 [easyctl] localhost.localdomain | 2021-10-25T04:51:21-04:00 | debug | Quota: 0 Period: 100000 [weiliang@localhost ~]$ ps -ef|grep 244051 root 244051 1 0 04:51 pts/0 00:00:00 stress --vm 1 --vm-bytes 512M --vm-hang 120 --timeout 120s root 244052 244051 99 04:51 pts/0 00:00:11 stress --vm 1 --vm-bytes 512M --vm-hang 120 --timeout 120s root 244053 244051 1 04:51 pts/0 00:00:00 stress --vm 1 --vm-bytes 512M --vm-hang 120 --timeout 120s ... 运行正常 ，证明限制生效 B.测试用例2: 配额1GB申请2GB boot-app: - app-name: app1 boot-cmd: stress --vm 1 --vm-bytes 2GB --vm-hang 120 --timeout 120s resources: limits: cpu: 1 memory: 1GB 执行，并查询进程 $ easyctl boot app-with-cgroups -c config.yaml --debug [easyctl] localhost.localdomain | 2021-10-25T05:01:52-04:00 | info | 启动命令: stress --vm 1 --vm-bytes 2G --vm-hang 120 --vm-stride 64 --timeout 120s, 进程id: 244246 [easyctl] localhost.localdomain | 2021-10-25T05:01:52-04:00 | info | 限制程序配额 -> CPU: 0核, 内存: 1GB [easyctl] localhost.localdomain | 2021-10-25T05:01:52-04:00 | info | 创建cpu子系统: /sys/fs/cgroup/cpu/app1 memory子系统: /sys/fs/cgroup/memory/app1 [easyctl] localhost.localdomain | 2021-10-25T05:01:52-04:00 | debug | 0 [easyctl] localhost.localdomain | 2021-10-25T05:01:52-04:00 | debug | Quota: 0 Period: 100000 $ ps -ef|grep 244246 weiliang 244250 244014 0 05:02 pts/0 00:00:00 grep --color=auto 244246 进程启动失败。此时查看系统日志，由于OOM已被kill掉了 $ journalctl -xef ... Oct 25 05:01:52 localhost.localdomain kernel: [ pid ] uid tgid total_vm rss nr_ptes swapents oom_score_adj name Oct 25 05:01:52 localhost.localdomain kernel: [244246] 0 244246 1828 107 8 0 0 stress Oct 25 05:01:52 localhost.localdomain kernel: [244247] 0 244247 526117 262128 521 0 0 stress Oct 25 05:01:52 localhost.localdomain kernel: Memory cgroup out of memory: Kill process 244247 (stress) score 971 or sacrifice child Oct 25 05:01:52 localhost.localdomain kernel: Killed process 244247 (stress) total-vm:2104468kB, anon-rss:1048388kB, file-rss:124kB, shmem-rss:0kB ... C.测试用例3: 配额1GB申请1GB boot-app: - app-name: app1 boot-cmd: stress --vm 1 --vm-bytes 1G --vm-hang 120 --timeout 120s resources: limits: cpu: 1 memory: 1GB 执行，并查询进程 $ easyctl] localhost.localdomain | 2021-10-25T05:28:34-04:00 | info | 启动命令: stress --vm 1 --vm-bytes 1G --vm-hang 120 --vm-stride 64 --timeout 120s, 进程id: 244609 [easyctl] localhost.localdomain | 2021-10-25T05:28:34-04:00 | info | 限制程序配额 -> CPU: 0核, 内存: 1GB [easyctl] localhost.localdomain | 2021-10-25T05:28:34-04:00 | info | 创建cpu子系统: /sys/fs/cgroup/cpu/app1 memory子系统: /sys/fs/cgroup/memory/app1 [easyctl] localhost.localdomain | 2021-10-25T05:28:34-04:00 | debug | 0 [easyctl] localhost.localdomain | 2021-10-25T05:28:34-04:00 | debug | Quota: 0 Period: 100000 $ ps -ef|grep 244609 root 244609 1 0 05:28 pts/0 00:00:00 stress --vm 1 --vm-bytes 1G --vm-hang 120 --vm-stride 64 --timeout 120s root 244612 244609 5 05:28 pts/0 00:00:00 stress --vm 1 --vm-bytes 1G --vm-hang 120 --vm-stride 64 --timeout 120s 最佳实践 不限制cpu，限制内存最大8GB boot-app: - app-name: replace_to_your_program_name boot-cmd: replace_to_your_program_boot_command resources: limits: memory: 8GB 不限制内存，限制cpu最多使用2vCore（cpu线程） boot-app: - app-name: replace_to_your_program_name boot-cmd: replace_to_your_program_boot_command resources: limits: cpu: 2 限制内存最大8GB、cpu最多使用2vCore（cpu线程） boot-app: - app-name: replace_to_your_program_name boot-cmd: replace_to_your_program_boot_command resources: limits: cpu: 2 memory: 8GB Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"安装指令集/01安装单机redis.html":{"url":"安装指令集/01安装单机redis.html","title":"01安装单机redis","keywords":"","body":"redis安装 前置条件： 配置好yum源 下载redis 安装包 安装easyctl 版本支持：v0.7.10-alpha以上 安装 1.生成配置文件 $ easyctl install redis INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 2.调整配置 vi config.yaml，调整以下参数 server主机信息（用于安装redis主机） redis: redis配置 password: redis密码 port: redis监听端口 package: redis安装包路径 server: - host: 10.10.10.1 username: root password: 123456 port: 22 excludes: - 192.168.235.132 redis: password: \"dddd\" port: 26379 package: \"redis-5.0.14.tar.gz\" 3.安装 $ easyctl install redis -c config.yaml --debug 结果输出如下： [easyctl] DESKTOP-O8QG6I5 | 2021-10-10T14:36:01+08:00 | info | redis安装完毕,相关信息如下： 1.节点列表: 10.10.10.1:26379 2.密码: dddd 3.日志目录: /var/log/redis 4.数据目录: /var/data/redis 5.启动命令/节点: service redis-33333 start 6.二进制目录：/usr/local/bin/redis-*--- PASS: TestInstallRedis (31.00s) 卸载 参考清理redis Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"安装指令集/02安装redis集群.html":{"url":"安装指令集/02安装redis集群.html","title":"02安装redis集群","keywords":"","body":"redis集群安装 前置条件： 配置好yum源，目前支持三种集群规模 下载redis 安装包 安装easyctl 支持的集群类型： [x] 单机伪集群 [x] 三节点集群（三主三从，每个节点共运行两个服务） [x] 六节点集群（三主三从，每个节点共运行一个服务） 版本支持：v0.7.13-alpha以上 单机伪集群 1.生成配置文件 $ easyctl install redis-cluster INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 2.调整配置 vi config.yaml，调整以下参数 server主机信息（用于安装redis集群主机） redis-cluster: 集群配置 password: redis密码 cluster-type: 部署集群类型 package: redis安装包路径 server: - host: 10.10.10.[1:3] username: root password: 123456 port: 22 excludes: - 192.168.235.132 redis-cluster: password: \"\" cluster-type: 1 # [0] 本地伪集群 ; [1] 三节点3分片2副本 ; [2] 6节点3分片2副本 package: \"redis-5.0.14.tar.gz\" listenPorts: # redis监听端口（集群类型[0]需要6个端口，集群类型[1]需要2个端口, 集群类型[2]需要1个端口） - 26379 - 26380 - 26381 - 26382 - 26383 - 26384 3.安装 $ easyctl install redis-cluster -c config.yaml --debug 结果输出如下： 1.节点列表: 10.10.10.1:26379,10.10.10.1:26380,10.10.10.1:26381,10.10.10.1:26382,10.10.10.1:26383,10.10.10.1:26384 2.密码: 3.日志目录: /var/log/redis 4.数据目录: /var/data/redis 5.启动命令/节点: service redis-26379 start service redis-26380 start service redis-26381 start service redis-26382 start service redis-26383 start service redis-26384 start 三节点集群 1.生成配置文件 $ easyctl install redis-cluster INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 2.调整配置 vi config.yaml，调整以下参数 server主机信息（用于安装redis集群主机） redis-cluster: 集群配置 password: redis密码 cluster-type: 部署集群类型 package: redis安装包路径 server: - host: 10.10.10.[1:3] username: root password: 123456 port: 22 excludes: - 192.168.235.132 redis-cluster: password: \"\" cluster-type: 1 # [0] 本地伪集群 ; [1] 三节点3分片2副本 ; [2] 6节点3分片2副本 package: \"redis-5.0.14.tar.gz 3.安装 $ easyctl install redis-cluster -c config.yaml --debug 结果输出如下： 1.节点列表: 10.10.10.1:26379,10.10.10.2:26379,10.10.10.3:26379,10.10.10.1:26380,10.10.10.2:26380,10.10.10.3:26380 2.密码: redis@ddd 3.日志目录: /var/log/redis 4.数据目录: /var/data/redis 5.启动命令/节点: service redis-26379 start service redis-26380 start 三节点集群 1.生成配置文件 $ easyctl install redis-cluster INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 2.调整配置 vi config.yaml，调整以下参数 server主机信息（用于安装redis集群主机） redis-cluster: 集群配置 password: redis密码 cluster-type: 部署集群类型 package: redis安装包路径 server: - host: 10.10.10.[1:6] username: root password: 123456 port: 22 excludes: - 192.168.235.132 redis-cluster: password: \"redis@ddd\" cluster-type: 2 # [0] 本地伪集群 ; [1] 三节点3分片2副本 ; [2] 6节点3分片2副本 package: \"redis-5.0.14.tar.gz 3.安装 $ easyctl install redis-cluster -c config.yaml --debug 结果输出如下： 1.节点列表: 10.10.10.1:26379,10.10.10.2:26379,10.10.10.3:26379,10.10.10.4:26379,10.10.10.5:26379,10.10.10.6:26379 2.密码: redis@ddd 3.日志目录: /var/log/redis 4.数据目录: /var/data/redis 5.启动命令/节点: service redis-26379 start Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"安装指令集/03安装docker.html":{"url":"安装指令集/03安装docker.html","title":"03安装docker","keywords":"","body":"docker安装 二进制方式安装配置docker 前置条件： 下载docker-ce 安装包 安装easyctl CentOS7系统 版本支持：v0.7.15-alpha以上 本地安装-v0.7.15-alpha版本 v0.7.15-alpha版本 1.生成配置文件 $ easyctl install docker-ce INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 2.调整配置 vi config.yaml，调整以下参数 server主机信息（用于安装docker主机），如果为空表示本地安装 excludes排除server.host声明地址段内的主机 docker: docker配置 package: docker二进制包 preserveDir: docker持久化目录（默认/var/lib/docker） insecureRegistries: 非https仓库列表 registryMirrors: # 镜像源列表 server: - host: 10.10.10.1-3 username: root password: 123456 port: 22 excludes: - 192.168.235.132 docker: package: docker-19.03.15.tgz # 二进制安装包目录 preserveDir: /data/lib/docker # docker数据持久化目录 insecureRegistries: # 非https仓库列表 - gcr.azk8s.cn - quay.azk8s.cn registryMirrors: # 镜像源 config.yaml修改后样例: docker: package: docker-19.03.15.tgz # 二进制安装包目录 preserveDir: /data/lib/docker # docker数据持久化目录 insecureRegistries: # 非https仓库列表 - gcr.azk8s.cn - quay.azk8s.cn registryMirrors: # 镜像源 3.安装样例 可以去掉--debug参数减少内容输出 $ easyctl install docker-ce -c config.yaml --debug 结果输出如下： ... [easyctl] localhost.localdomain | 2021-11-04T23:20:16-04:00 | info | 启动docker [easyctl] localhost.localdomain | 2021-11-04T23:20:16-04:00 | debug | 执行指令: setenforce 0 groupadd docker useradd docker -g docker systemctl daemon-reload systemctl restart docker [easyctl] localhost.localdomain | 2021-11-04T23:20:17-04:00 | debug | [easyctl] localhost.localdomain | 2021-11-04T23:20:17-04:00 | info | docker安装完 本地安装-v0.7.18-alpha版本 v0.7.18-alpha版本 生成配置文件 $ easyctl install docker-ce --local INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 调整配置内容（一般默认即可，如果数据盘挂载目录不是/data，需调整为数据盘挂载目录） preserveDir: docker持久化目录，存放镜像等内容的数据目录 docker: package: docker-19.03.15.tgz # 二进制安装包目录 preserveDir: /data/lib/docker # docker数据持久化目录 insecureRegistries: # 非https仓库列表 - gcr.azk8s.cn - quay.azk8s.cn registryMirrors: 安装docker $ easyctl install docker-ce --local -c config.yaml [easyctl] localhost.localdomain | 2021-12-31T02:02:07-05:00 | info | 解析docker安装配置 [easyctl] localhost.localdomain | 2021-12-31T02:02:07-05:00 | info | 解析server列表完毕! [easyctl] localhost.localdomain | 2021-12-31T02:02:07-05:00 | info | 清理docker历史文件... [easyctl] localhost.localdomain | 2021-12-31T02:02:07-05:00 | info | 分发package... [easyctl] localhost.localdomain | 2021-12-31T02:02:07-05:00 | info | 分发包至本地: cp docker-19.03.15.tgz /tmp/docker-19.03.15.tgz [easyctl] localhost.localdomain | 2021-12-31T02:02:07-05:00 | info | 分发docker安装包完毕... [easyctl] localhost.localdomain | 2021-12-31T02:02:11-05:00 | info | 生成配置文件 [easyctl] localhost.localdomain | 2021-12-31T02:02:11-05:00 | info | 配置开机自启动docker [easyctl] localhost.localdomain | 2021-12-31T02:02:11-05:00 | info | 启动docker [easyctl] localhost.localdomain | 2021-12-31T02:02:12-05:00 | info | docker安装完毕 查看docker状态 $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES $ docker version Client: Docker Engine - Community Version: 19.03.15 API version: 1.40 Go version: go1.13.15 Git commit: 99e3ed8 Built: Sat Jan 30 03:11:43 2021 OS/Arch: linux/amd64 Experimental: false Server: Docker Engine - Community Engine: Version: 19.03.15 API version: 1.40 (minimum version 1.12) Go version: go1.13.15 Git commit: 99e3ed8 Built: Sat Jan 30 03:18:13 2021 OS/Arch: linux/amd64 Experimental: false containerd: Version: v1.3.9 GitCommit: ea765aba0d05254012b0b9e595e995c09186427f runc: Version: 1.0.0-rc10 GitCommit: dc9208a3303feef5b3839f4323d9beb36df0a9dd docker-init: Version: 0.18.0 GitCommit: fec3683 远程安装 通过ssh方式远程安装，需要指定servers列表 1.生成配置文件 $ easyctl install docker-ce INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 2.调整配置 vi config.yaml，调整以下参数 server主机信息（用于安装docker主机），如果为空表示本地安装 excludes排除server.host声明地址段内的主机 docker: docker配置 package: docker二进制包 preserveDir: docker持久化目录（默认/var/lib/docker） insecureRegistries: 非https仓库列表 registryMirrors: # 镜像源列表 server: - host: 10.10.10.1-3 username: root password: 123456 port: 22 excludes: - 192.168.235.132 docker: package: docker-19.03.15.tgz # 二进制安装包目录 preserveDir: /data/lib/docker # docker数据持久化目录 insecureRegistries: # 非https仓库列表 - gcr.azk8s.cn - quay.azk8s.cn registryMirrors: # 镜像源 config.yaml修改后样例: server: - host: 192.168.109.143 username: root password: 1 port: 22 docker: package: docker-19.03.15.tgz # 二进制安装包目录 preserveDir: /data/lib/docker # docker数据持久化目录 insecureRegistries: # 非https仓库列表 - gcr.azk8s.cn - quay.azk8s.cn registryMirrors: # 镜像源 3.安装样例 可以去掉--debug参数减少内容输出 $ easyctl install docker-ce -c config.yaml --debug 结果输出如下： ... WantedBy=sockets.target [easyctl] localhost.localdomain | 2021-11-04T23:22:18-04:00 | info | 启动docker [easyctl] localhost.localdomain | 2021-11-04T23:22:18-04:00 | info | 开始并行执行命令... [easyctl] localhost.localdomain | 2021-11-04T23:22:18-04:00 | info | [192.168.109.143] 开始执行指令 -> setenforce 0 groupadd docker useradd docker -g docker systemctl daemon-reload systemctl restart docker [easyctl] localhost.localdomain | 2021-11-04T23:22:20-04:00 | info | docker安装完毕 ``` Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"导出指令集/01从harbor库中导出chart.html":{"url":"导出指令集/01从harbor库中导出chart.html","title":"01从harbor库中导出chart","keywords":"","body":"chart导出 从harbor中批量下载chart文件 背景说明 通常chart应用存放于harbor进行管理，但harbor（v2.1.4）只支持单个chart文件下载。 对于离线批量分发场景，比较难受，特开发该功能。 生成默认配置文件 [root@localhost ~]# easyctl export chart I0927 09:30:47.685246 14817 export.go:44] 检测到配置文件参数为空，生成配置文件样例 -> config.yaml 修改配置文件 vi config.yaml helm-repo: endpoint: 10.10.1.3:80 # harbor访问地址 domain: harbor.wl.io # harbor域 username: admin # harbor用户 password: 123456 # harbor密码 preserveDir: /root/charts # chart包持久化目录 package: true # 是否打成tar包 repo-name: charts # chart repo harbor内的名称 配置 --debug输出debug日志，可选参数 [root@node1 ~]# easyctl export chart -c config.yaml INFO[0000] 解析chart仓库配置... INFO[0000] 待导出chart数量为: 135 INFO[0000] 导出chart... INFO[0000] 创建目录: /root/charts INFO[0000] 逐一导出chart中... INFO[0002] 导出完毕，chart总数为:135 Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"导出指令集/02从harbor库中导出镜像tag列表.html":{"url":"导出指令集/02从harbor库中导出镜像tag列表.html","title":"02从harbor库中导出镜像tag列表","keywords":"","body":"harbor镜像tag列表导出 从harbor中批量导出镜像tag列表 背景说明 一些场景需要获取镜像tag列表（比如：批量导出镜像时） 生成默认配置文件 [root@localhost ~]# easyctl export harbor-image-list I0928 21:19:46.803428 10628 export.go:41] 检测到配置文件参数为空，生成配置文件样例 -> config.yaml 修改配置文件 vi config.yaml harbor-repo: schema: http # 不可修改（暂不支持https harbor） address: 192.168.1.1:80 # harbor连接地址 domain: harbor.wl.io # harbor域 user: admin # harbor用户 password: Harbor-12345 # harbor用户密码 preserve-dir: harbor-image-list # 不建议修改，持久化tag projects: # 导出哪些项目下的镜像tag（如果为空表示全库导出） - apache # project名称 - weaveworks excludes: # 配置'projects'空值使用，过滤某些project - ddd 单项目导出 导出单项目镜像列表 配置信息（部分内容已脱敏） harbor: schema: http address: *.*.*.* domain: harbor.wl.io user: admin password: ****** preserve-dir: harbor-image-list projects: - apache 导出语句，--debug输出debug日志，可选参数 easyctl export harbor-image-list -c config.yaml --debug 目录文件结构如下： /work # 执行命令的目录 ├── config.yaml # 配置文件 └── harbor-image-list # 存放镜像列表文件的目录（内部按项目建立文件夹进行隔离） ├── apache # apache项目目录，存放apache下镜像列表文件 │ └── image-list.txt # apache下镜像列表文件 └── images-list.txt # 导出项目下的所有镜像列表（x/image-list.txt xx/image-list.txt等内容合集） images/images-list.txt内容 [root@localhost work]# cat images/images-list.txt harbor.wl.io/apache/skywalking-java-agent:8.6.0-alpine harbor.wl.io/apache/skywalking-oap-server:8.6.0-es7 harbor.wl.io/apache/skywalking-ui:8.6.0 images/apache/image-list.txt内容 [root@localhost work]# cat images/apache/image-list.txt harbor.wl.io/apache/skywalking-java-agent:8.6.0-alpine harbor.wl.io/apache/skywalking-oap-server:8.6.0-es7 harbor.wl.io/apache/skywalking-ui:8.6.0 多项目导出 导出一个以上项目下镜像列表 配置信息（部分内容已脱敏） harbor: schema: http address: *.*.*.* domain: harbor.wl.io user: admin password: ****** preserve-dir: harbor-image-list projects: - apache - b2i 导出语句，--debug输出debug日志，可选参数 easyctl export harbor-image-list -c config.yaml --debug 目录文件结构如下： /work/ # 执行命令的目录 ├── config.yaml # 配置文件 └── harbor-image-list # 存放镜像列表文件的目录（内部按项目建立文件夹进行隔离） ├── apache # apache项目目录，存放apache下镜像列表文件 │ └── image-list.txt # apache下镜像列表文件 ├── b2i # b2i项目目录，存放b2i下镜像列表文件 │ └── image-list.txt # b2下镜像列表文件 └── images-list.txt # 导出项目下的所有镜像列表（x/image-list.txt xx/image-list.txt等内容合集） images/images-list.txt内容 [root@localhost work]# cat images/images-list.txt harbor.wl.io/apache/skywalking-java-agent:8.6.0-alpine harbor.wl.io/apache/skywalking-oap-server:8.6.0-es7 harbor.wl.io/apache/skywalking-ui:8.6.0 harbor.wl.io/b2i/binary-nginx-builder:latest harbor.wl.io/b2i/nginx-centos7-s2ibuilder:latest harbor.wl.io/b2i/java-8-runtime:base-alpha harbor.wl.io/b2i/java-8-runtime:base harbor.wl.io/b2i/java-8-runtime:advance harbor.wl.io/b2i/java-8-centos7:base harbor.wl.io/b2i/java-8-centos7:advance harbor.wl.io/b2i/tomcat9-java8-runtime:latest harbor.wl.io/b2i/tomcat8-java8-runtime:latest harbor.wl.io/b2i/tomcat8-java8-centos7:latest harbor.wl.io/b2i/tomcat9-java8-centos7:latest images/apache/image-list.txt内容 [root@localhost work]# cat images/apache/image-list.txt harbor.wl.io/apache/skywalking-java-agent:8.6.0-alpine harbor.wl.io/apache/skywalking-oap-server:8.6.0-es7 harbor.wl.io/apache/skywalking-ui:8.6.0 images/b2i/image-list.txt内容 [root@localhost work]# cat images/apache/image-list.txt harbor.wl.io/b2i/binary-nginx-builder:latest harbor.wl.io/b2i/nginx-centos7-s2ibuilder:latest harbor.wl.io/b2i/java-8-runtime:base-alpha harbor.wl.io/b2i/java-8-runtime:base harbor.wl.io/b2i/java-8-runtime:advance harbor.wl.io/b2i/java-8-centos7:base harbor.wl.io/b2i/java-8-centos7:advance harbor.wl.io/b2i/tomcat9-java8-runtime:latest harbor.wl.io/b2i/tomcat8-java8-runtime:latest harbor.wl.io/b2i/tomcat8-java8-centos7:latest harbor.wl.io/b2i/tomcat9-java8-centos7:latest 全项目导出 导出全部项目下镜像列表 配置信息（部分内容已脱敏） harbor: schema: http address: *.*.*.* domain: harbor.wl.io user: admin password: ****** export-all: true preserve-dir: harbor-image-list projects: 导出语句 easyctl export harbor-image-list -c config.yaml --debug 目录文件结构如下： /work/ # 执行命令的目录 ├── config.yaml # 配置文件 └── harbor-image-list # 存放镜像列表文件的目录（内部按项目建立文件夹进行隔离） ├── apache # apache项目目录，存放apache下镜像列表文件 │ └── image-list.txt # apache下镜像列表文件 ├── b2i # b2i项目目录，存放b2i下镜像列表文件 │ └── image-list.txt # b2下镜像列表文件 └── images-list.txt # 导出项目下的所有镜像列表（x/image-list.txt xx/image-list.txt等内容合集） ├── ceph-csi │ └── image-list.txt ├── champ │ └── image-list.txt ├── charts │ └── image-list.txt ├── csiplugin │ └── image-list.txt ├── elastic │ └── image-list.txt ├── elasticsearch │ └── image-list.txt ├── grafana │ └── image-list.txt ├── hsa-cep │ └── image-list.txt ├── hsa-k8s-public │ └── image-list.txt ├── images-list.txt ├── istio │ └── image-list.txt ├── jaegertracing │ └── image-list.txt ├── jenkins │ └── image-list.txt ├── jimmidyson │ └── image-list.txt ├── kubernetes │ └── image-list.txt ├── kubesphere │ └── image-list.txt ├── library │ └── image-list.txt ├── minio │ └── image-list.txt ├── openebs │ └── image-list.txt ├── openpitrix │ └── image-list.txt ├── osixia │ └── image-list.txt ├── paas │ └── image-list.txt ├── prom │ └── image-list.txt └── weaveworks └── image-list.txt Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"执行指令集/01跨主机并行执行shell.html":{"url":"执行指令集/01跨主机并行执行shell.html","title":"01跨主机并行执行shell","keywords":"","body":"跨主机并行执行shell 版本&兼容性 版本支持 v0.8.3以上 兼容性 [x] CentOS6 [x] CentOS7 使用方式1 参考以下链接进行安装 安装说明文档 生成默认配置文件 $ easyctl exec shell INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 修改配置文件 config.yaml, 修改主机列表。easyctl根据主机列表ssh远程至目标主机执行shell server: - host: 10.10.10.[1:3] username: root privateKeyPath: ~/.ssh/id_rsa password: \"\" port: 22 excludes: - 192.168.235.132 script: \"1.sh\" 执行 添加--debug可以输出详细内容。 使用方式2 生成默认配置文件 exec 后执行的 shell 指令需用双引号引用 $ easyctl exec \"date\" INFO[0000] 未找到配置文件，为您生成配置文件样例, 请修改文件内容后携带 -c 参数重新执行 -> config.yaml 修改配置文件 config.yaml, 修改主机列表。easyctl根据主机列表ssh远程至目标主机执行shell server: - host: 10.10.10.[1:3] username: root privateKeyPath: ~/.ssh/id_rsa password: \"\" port: 22 excludes: - 192.168.235.132 执行 添加--debug可以输出详细内容。 $ easyctl exec \"date\" -c config.yaml --debug 配置项说明 主机配置段：该段配置远程执行shell的主机信息，字段说明如下 host: 10.10.10.[1:3] 主机地址段，适用于ip连续场景。分隔符可以为[1:3]、1-2、[1-2]、1:2 username: 远程主机ssh用户名称，缺省值为root password: 对应username的密码 privateKeyPath: ssh私钥路径 port: ssh端口，默认22 excludes: 排除host地址段内的ip地址列表 privateKeyPath优先级高于password: privateKeyPath为空，取password值，ssh使用密码登录方式 privateKeyPath非空，取privateKeyPath值，ssh使用密钥登录方式 server: - host: 10.10.10.[1:3] username: root privateKeyPath: ~/.ssh/id_rsa password: \"\" port: 22 excludes: - 192.168.235.132 脚本配置: script: \"date\": 远程执行的shell指令，适用于运行单个shell指令场景 script: \"1.sh\": 远程执行的shell脚本，适用于运行多个shell指令场景 配置样例 1.主机: 10.10.10.1-10.10.10.10执行date指令，使用密钥登录方式 server: - host: 10.10.10.[1:10] username: root privateKeyPath: ~/.ssh/id_rsa password: \"\" port: 22 excludes: - 192.168.235.132 script: \"date\" 2.主机: 10.10.10.1-10.10.10.10执行date指令，使用密码登录方式 server: - host: 10.10.10.[1:10] username: root # privateKeyPath: ~/.ssh/id_rsa password: \"123456\" port: 22 excludes: - 192.168.235.132 script: \"date\" 3.主机: 10.10.10.1、10.10.10.3、10.10.10.4执行date指令，使用密码登录方式 server: - host: 10.10.10.[1:4] username: root # privateKeyPath: ~/.ssh/id_rsa password: \"123456\" port: 22 excludes: - 10.10.10.2 script: \"date\" 4.主机: 10.10.10.1、10.10.10.3、10.10.10.4执行shell脚本，使用密码登录方式 server: - host: 10.10.10.[1:4] username: root # privateKeyPath: ~/.ssh/id_rsa password: \"123456\" port: 22 excludes: - 10.10.10.2 script: \"/root/modify-sysctl.sh\" /root/modify-sysctl.sh脚本内容如下 #!/bin/bash sed -i '/vm.dirty_background_ratio/d' /etc/sysctl.conf sed -i '/vm.dirty_ratio/d' /etc/sysctl.conf echo \"vm.dirty_ratio=10\" >> /etc/sysctl.conf echo \"vm.dirty_background_ratio=5\" >> /etc/sysctl.conf sysctl -p 5.主机: 10.10.10.1、10.10.10.3、10.10.10.4执行shell脚本，使用密码登录方式，且ssh端口及密码均不一致 server: - host: 10.10.10.1 username: root # privateKeyPath: ~/.ssh/id_rsa password: \"123456\" port: 22 - host: 10.10.10.3 username: root # privateKeyPath: ~/.ssh/id_rsa password: \"123\" port: 22122 - host: 10.10.10.4 username: root # privateKeyPath: ~/.ssh/id_rsa password: \"456\" port: 22222 excludes: - 10.10.10.2 script: \"/root/modify-sysctl.sh\" /root/modify-sysctl.sh脚本内容如下 #!/bin/bash sed -i '/vm.dirty_background_ratio/d' /etc/sysctl.conf sed -i '/vm.dirty_ratio/d' /etc/sysctl.conf echo \"vm.dirty_ratio=10\" >> /etc/sysctl.conf echo \"vm.dirty_background_ratio=5\" >> /etc/sysctl.conf sysctl -p Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"执行指令集/02多机ping.html":{"url":"执行指令集/02多机ping.html","title":"02多机ping","keywords":"","body":"多机ping 版本&兼容性 版本支持 v0.7.17-alpha以上 兼容性 [x] CentOS6 [x] CentOS7 使用方式 参考以下链接进行安装 安装说明文档 生成默认配置文件 $ easyctl exec ping INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 修改配置文件 config.yaml默认配置解析： ping检测192.168.1.1-192.168.1.255与192.168.2.1-192.168.2.255地址段内主机，如果主机能ping通，将ip地址入server-list.txt文件 ping: - address: 192.168.1 start: 1 end: 255 #port: 22 - address: 192.168.2 start: 1 end: 255 #port: 22 执行 添加--debug可以输出详细内容。 $ easyctl exec ping -c config.yaml --debug 配置项说明 ping: - address: 192.168.1 start: 1 end: 255 #port: 22 - address: 192.168.2 start: 1 end: 255 #port: 22 ping: 数组类型列表 address: 192.168.1 主机地址段，格式为ip地址前三位 start: address地址段起始ip（ip地址第四位值） end: address地址段结束ip（ip地址第四位值） port: 对ip地址执行额外的端口探测（适用于禁ping或排除虚拟IP地址等场景；建议探测ssh端口） 配置样例 探测192.168.1.1-192.168.1.255内主机可达性，并探测22端口可达性 ping: - address: 192.168.1 start: 1 end: 255 port: 22 探测192.168.1.1-192.168.1.255与192.168.2.1-192.168.2.255内主机可达性，不探测端口可达性 ping: - address: 192.168.1 start: 1 end: 255 #port: 22 - address: 192.168.2 start: 1 end: 255 #port: 22 执行逻辑 Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"执行指令集/03跨主机并行切换root执行shell.html":{"url":"执行指令集/03跨主机并行切换root执行shell.html","title":"03跨主机并行切换root执行shell","keywords":"","body":"跨主机切用户并行执行shell 适用场景说明： 适用于目标主机不支持root直接登录场景，通过easyctl二次切换用户执行指令 版本&兼容性 版本支持 v0.7.19-alpha以上 兼容性 [x] CentOS6 [x] CentOS7 使用方式 参考以下链接进行安装 安装说明文档 生成默认配置文件 $ easyctl exec su-shell INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 修改配置文件 config.yaml, 修改主机列表。easyctl根据主机列表ssh远程至目标主机, 切换root执行shell username、password为普通用户登录账号及口令 rootPassword: root账号口令 server: - host: 10.10.10.[1:3] username: xxx # privateKeyPath: ~/.ssh/id_rsa password: \"\" rootPassword: \"\" port: 22 excludes: - 192.168.235.132 执行 添加--debug可以输出详细内容。 $ easyctl exec su-shell -c config.yaml --debug 配置项说明 主机配置段：该段配置远程执行shell的主机信息，字段说明如下 host: 10.10.10.[1:3] 主机地址段，适用于ip连续场景。分隔符可以为[1:3]、1-2、[1-2]、1:2 username: 远程主机ssh普通用户名称 password: 对应username的密码 rootPassword: root账号口令 privateKeyPath: ssh私钥路径 port: ssh端口，默认22 excludes: 排除host地址段内的ip地址列表 privateKeyPath优先级高于password: privateKeyPath为空，取password值，ssh使用密码登录方式 privateKeyPath非空，取privateKeyPath值，ssh使用密钥登录方式 server: - host: 10.10.10.[1:3] username: apache privateKeyPath: ~/.ssh/id_rsa password: \"\" rootPassword: \"\" port: 22 excludes: - 192.168.235.132 脚本配置: script: \"date\": 远程执行的shell指令，适用于运行单个shell指令场景 script: \"1.sh\": 远程执行的shell脚本，适用于运行多个shell指令场景 配置样例 1.主机: 10.10.10.1-10.10.10.10执行date指令，使用密钥登录方式 server: - host: 10.10.10.[1:10] username: apache privateKeyPath: ~/.ssh/id_rsa password: \"\" rootPassword: \"\" port: 22 excludes: - 192.168.235.132 script: \"date\" 2.主机: 10.10.10.1-10.10.10.10执行date指令，使用密码登录方式 server: - host: 10.10.10.[1:10] username: apache # privateKeyPath: ~/.ssh/id_rsa password: \"123456\" rootPassword: \"\" port: 22 excludes: - 192.168.235.132 script: \"date\" 3.主机: 10.10.10.1、10.10.10.3、10.10.10.4执行date指令，使用密码登录方式 server: - host: 10.10.10.[1:4] username: apache # privateKeyPath: ~/.ssh/id_rsa password: \"123456\" rootPassword: \"\" port: 22 excludes: - 10.10.10.2 script: \"date\" 4.主机: 10.10.10.1、10.10.10.3、10.10.10.4执行shell脚本，使用密码登录方式 server: - host: 10.10.10.[1:4] username: apache # privateKeyPath: ~/.ssh/id_rsa password: \"123456\" rootPassword: \"\" port: 22 excludes: - 10.10.10.2 script: \"/root/modify-sysctl.sh\" /root/modify-sysctl.sh脚本内容如下 #!/bin/bash sed -i '/vm.dirty_background_ratio/d' /etc/sysctl.conf sed -i '/vm.dirty_ratio/d' /etc/sysctl.conf echo \"vm.dirty_ratio=10\" >> /etc/sysctl.conf echo \"vm.dirty_background_ratio=5\" >> /etc/sysctl.conf sysctl -p 5.主机: 10.10.10.1、10.10.10.3、10.10.10.4执行shell脚本，使用密码登录方式，且ssh端口及密码均不一致 server: - host: 10.10.10.1 username: apache # privateKeyPath: ~/.ssh/id_rsa password: \"123456\" rootPassword: \"123\" port: 22 - host: 10.10.10.3 username: apache # privateKeyPath: ~/.ssh/id_rsa password: \"123\" rootPassword: \"123\" port: 22122 - host: 10.10.10.4 username: apache # privateKeyPath: ~/.ssh/id_rsa password: \"456\" rootPassword: \"123\" port: 22222 excludes: - 10.10.10.2 script: \"/root/modify-sysctl.sh\" /root/modify-sysctl.sh脚本内容如下 #!/bin/bash sed -i '/vm.dirty_background_ratio/d' /etc/sysctl.conf sed -i '/vm.dirty_ratio/d' /etc/sysctl.conf echo \"vm.dirty_ratio=10\" >> /etc/sysctl.conf echo \"vm.dirty_background_ratio=5\" >> /etc/sysctl.conf sysctl -p Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"扫描指令集/01扫描系统信息.html":{"url":"扫描指令集/01扫描系统信息.html","title":"01扫描系统信息","keywords":"","body":"扫描系统信息 版本支持： v0.7.18-alpha以上 兼容性： [x] CentOS6 [x] CentOS7 扫描内容： 基本信息: IP地址 主机名 系统版本 内核版本 CPU信息 CPU线程数（逻辑核数） CPU主频 CPU型号 CPU平均负载 内存信息 总内存大小 已用内存大小 内存使用率 磁盘信息 系统盘名称 根分区使用率 使用率超过90%的分区 使用方式 参考以下链接进行安装 安装说明文档 生成默认配置文件 $ easyctl scan os INFO[0000] 生成配置文件样例, 请携带 -c 参数重新执行 -> config.yaml 修改配置文件 config.yaml, 修改主机列表。easyctl根据主机列表ssh远程至目标主机进行扫描 server: - host: 10.10.10.[1:3] username: root privateKeyPath: \"\" # ~/.ssh/id_rsa，为空默认走password登录；不为空默认走密钥登录 password: 123456 port: 22 excludes: - 192.168.235.132 执行 添加--debug可以输出详细内容。 $ easyctl scan os -c config.yaml --debug 配置项说明 主机配置段：该段配置远程执行shell的主机信息，字段说明如下 host: 10.10.10.[1:3] 主机地址段，适用于ip连续场景。分隔符可以为[1:3]、1-2、[1-2]、1:2 username: 远程主机ssh用户名称，缺省值为root password: 对应username的密码 privateKeyPath: ssh私钥路径 port: ssh端口，默认22 excludes: 排除host地址段内的ip地址列表 privateKeyPath优先级高于password: privateKeyPath为空，取password值，ssh使用密码登录方式 privateKeyPath非空，取privateKeyPath值，ssh使用密钥登录方式 server: - host: 10.10.10.[1:3] username: root privateKeyPath: ~/.ssh/id_rsa password: \"\" port: 22 excludes: - 192.168.235.132 配置样例 1.扫描主机: 10.10.10.1-10.10.10.10信息 server: - host: 10.10.10.[1:10] username: root privateKeyPath: ~/.ssh/id_rsa password: \"\" port: 22 excludes: - 192.168.235.132 2.扫描主机: 10.10.10.1、10.10.10.3、10.10.10.4信息，使用密码登录方式 server: - host: 10.10.10.[1:4] username: root # privateKeyPath: ~/.ssh/id_rsa password: \"123456\" port: 22 excludes: - 10.10.10.2 扫描样例 执行完扫描指令后，会生成system.xlsx文件，内容大致如下： Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"清理指令集/01多主机redis清理.html":{"url":"清理指令集/01多主机redis清理.html","title":"01多主机redis清理","keywords":"","body":"清理redis服务及文件 版本&兼容性 版本支持 v0.7.11-alpha以上 兼容性 [x] CentOS6 [x] CentOS7 使用方式 参考以下链接进行安装 安装说明文档 生成默认配置文件 $ easyctl clean redis I1001 11:13:06.384839 126576 track.go:50] 检测到配置文件参数为空，生成配置文件样例 -> config.yaml 修改配置文件 config.yaml, 修改主机列表。easyctl根据主机列表ssh远程至目标主机执行清理job server: - host: 10.10.10.[1:40] username: root privateKeyPath: \"\" # ~/.ssh/id_rsa，为空默认走password登录；不为空默认走密钥登录 password: 123456 port: 22 excludes: - 192.168.235.132 执行 $ easyctl clean redis -c config.yaml --debug Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"清理指令集/02多主机dns配置清理.html":{"url":"清理指令集/02多主机dns配置清理.html","title":"02多主机dns配置清理","keywords":"","body":"清理dns配置 根据入参操作/etc/resolv.conf 版本&兼容性 版本支持 v0.7.8-alpha以上 兼容性 [x] CentOS6 [x] CentOS7 使用方式 参考以下链接进行安装 安装说明文档 生成默认配置文件 $ easyctl clean dns I1001 11:13:06.384839 126576 track.go:50] 检测到配置文件参数为空，生成配置文件样例 -> config.yaml 修改配置文件 config.yaml, 参考配置样例 调整配置 server: - host: 10.10.10.[1:40] username: root privateKeyPath: \"\" # ~/.ssh/id_rsa，为空默认走password登录；不为空默认走密钥登录 password: 123456 port: 22 excludes: - 192.168.235.132 clean-dns: address-list: # 地址列表，为空表示清除所有 - 8.8.8.8 excludes: # 排除哪些dns地址不被清理 - 114.114.114.114 执行 $ easyctl clean dns -c config.yaml --debug 配置样例 1.清空dns列表 server: - host: 10.10.10.[1:40] username: root privateKeyPath: \"\" # ~/.ssh/id_rsa，为空默认走password登录；不为空默认走密钥登录 password: 123456 port: 22 excludes: - 192.168.235.132 clean-dns: address-list: # 地址列表，为空表示清除所有 excludes: # 排除哪些dns地址不被清理 2.删除8.8.8.8、114.114.114.114 server: - host: 10.10.10.[1:40] username: root privateKeyPath: \"\" # ~/.ssh/id_rsa，为空默认走password登录；不为空默认走密钥登录 password: 123456 port: 22 excludes: - 192.168.235.132 clean-dns: address-list: # 地址列表，为空表示清除所有 - 8.8.8.8 - 114.114.114.114 excludes: # 排除哪些dns地址不被清理 3.清空dns配置保留114.114.114.114 server: - host: 10.10.10.[1:40] username: root privateKeyPath: \"\" # ~/.ssh/id_rsa，为空默认走password登录；不为空默认走密钥登录 password: 123456 port: 22 excludes: - 192.168.235.132 clean-dns: address-list: # 地址列表，为空表示清除所有 excludes: # 排除哪些dns地址不被清理 - 114.114.114.114 Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"禁用指令集/01主机禁Ping.html":{"url":"禁用指令集/01主机禁Ping.html","title":"01主机禁Ping","keywords":"","body":"配置主机禁Ping 配置主机禁Ping 生成默认配置文件 easyctl deny ping 修改配置文件 config.yaml server: - host: 10.10.1.[1:3] username: root password: 111111 port: 22 excludes: - 192.168.235.132 配置 --debug输出debug日志，可选参数 easyctl deny ping -c config.yaml --debug Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"禁用指令集/02主机禁用selinux.html":{"url":"禁用指令集/02主机禁用selinux.html","title":"02主机禁用selinux","keywords":"","body":"配置主机禁用selinux 生成默认配置文件 easyctl deny selinux 修改配置文件 config.yaml server: - host: 10.10.1.[1:3] username: root password: 111111 port: 22 excludes: - 192.168.235.132 配置 --debug输出debug日志，可选参数 easyctl deny selinux -c config.yaml --debug Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"禁用指令集/03主机禁用防火墙.html":{"url":"禁用指令集/03主机禁用防火墙.html","title":"03主机禁用防火墙","keywords":"","body":"配置主机禁用防火墙 生成默认配置文件 easyctl deny firewall 修改配置文件 config.yaml server: - host: 10.10.1.[1:3] username: root password: 111111 port: 22 excludes: - 192.168.235.132 配置 --debug输出debug日志，可选参数 easyctl deny firewall -c config.yaml --debug Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"设置指令集/01多主机host解析.html":{"url":"设置指令集/01多主机host解析.html","title":"01多主机host解析","keywords":"","body":"配置主机间host解析 采集将多主机间的hostname与IP解析，过滤hostname为localhost的条例，配置到/etc/hosts中 生成默认配置文件 easyctl set host-resolv 修改配置文件 config.yaml server: - host: 10.10.1.[1:3] username: root password: 111111 port: 22 excludes: - 192.168.235.132 配置host解析 --debug输出debug日志，可选参数 easyctl set host-resolv -c config.yaml --debug 查看解析 [root@scq-dc01 ~]# cat /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # easyctl hosts BEGIN 10.10.1.1 scq-dc01 10.10.1.2 scq-dc02 10.10.1.3 scq-dc03 # easyctl hosts END Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"设置指令集/02多主机修改root口令.html":{"url":"设置指令集/02多主机修改root口令.html","title":"02多主机修改root口令","keywords":"","body":"修改主机root口令 生成默认配置文件 easyctl set new-password 修改配置文件 config.yaml 调整主机信息，新root口令的值 server: - host: 10.10.10.[1:40] username: root password: 123456 port: 22 excludes: - 192.168.235.132 newRootPassword: \"3LEPnok84HxYc5\" 运行 --debug输出debug日志，可选参数 easyctl set new-password -c config.yaml --debug 成功样例 [root@localhost ~]# ./easyctl set new-password -c config.yaml I0926 15:14:56.431946 112411 log.go:184] 检测到配置文件中含有IP段，开始解析组装... I0926 15:14:56.431999 112411 parse.go:113] 解析到IP子网网段为：10.10.1.... I0926 15:14:56.432021 112411 parse.go:117] 解析到IP区间为：1:2... I0926 15:14:56.432026 112411 parse.go:121] 解析到起始IP为：10.10.1.1... I0926 15:14:56.432031 112411 parse.go:125] 解析到末尾IP为：10.10.1.2... I0926 15:14:56.432037 112411 exec.go:43] 开始并行执行命令... I0926 15:14:56.432084 112411 exec.go:105] [10.10.1.2] 开始执行指令 -> I0926 15:14:56.432114 112411 exec.go:105] [10.10.1.1] 开始执行指令 -> I0926 15:14:56.634224 112411 log.go:184] 测试 重新连接列表主机 Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"设置指令集/03多主机免密登录.html":{"url":"设置指令集/03多主机免密登录.html","title":"03多主机免密登录","keywords":"","body":"配置主机间免密登录 多主机间配置免密ssh登录（基于密钥登录） 生成默认配置文件 easyctl set password-less 修改配置文件 config.yaml server: - host: 10.10.1.[1:3] username: root password: 111111 port: 22 excludes: - 192.168.235.132 配置免密登录 --debug输出debug日志，可选参数 easyctl set password-less -c config.yaml --debug 测试 10.10.1.2为主机列表内的主机 ssh 10.10.1.2 Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"设置指令集/04多主机设置文件描述符.html":{"url":"设置指令集/04多主机设置文件描述符.html","title":"04多主机设置文件描述符","keywords":"","body":"配置主机文件描述符 多主机配置文件描述符数量（65535） 生成默认配置文件 easyctl set ulimit 修改配置文件 config.yaml server: - host: 10.10.1.[1:3] username: root password: 111111 port: 22 excludes: - 192.168.235.132 配置免密登录 --debug输出debug日志，可选参数 easyctl set ulimit -c config.yaml --debug Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"设置指令集/05多主机设置时区.html":{"url":"设置指令集/05多主机设置时区.html","title":"05多主机设置时区","keywords":"","body":"配置主机时区 多主机配置时区（上海时区） 生成默认配置文件 easyctl set tz 修改配置文件 config.yaml server: - host: 10.10.1.[1:3] username: root password: 111111 port: 22 excludes: - 192.168.235.132 配置免密登录 --debug输出debug日志，可选参数 easyctl set tz -c config.yaml --debug 测试 date Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"设置指令集/06多主机配置dns.html":{"url":"设置指令集/06多主机配置dns.html","title":"06多主机配置dns","keywords":"","body":"多主机配置dns 生成默认配置文件 easyctl set dns 修改配置文件 config.yaml 调整主机信息 调整dns地址列表 server: - host: 10.10.10.[1:40] username: root privateKeyPath: \"\" # ~/.ssh/id_rsa，为空默认走password登录；不为空默认走密钥登录 password: 123456 port: 22 excludes: - 192.168.235.132 dns: - 114.114.114.114 - 8.8.8.8 运行 --debug输出debug日志，可选参数 easyctl set dns -c config.yaml --debug 测试 任意主机列表内的主机执行： cat /etc/hosts Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "},"追踪指令集/01多主机日志实时追踪.html":{"url":"追踪指令集/01多主机日志实时追踪.html","title":"01多主机日志实时追踪","keywords":"","body":"实时输出多主机日志文件内容 实现跨多主机的类似tail功能 版本&兼容性 版本支持 v0.7.6-alpha以上 兼容性 [x] CentOS6 [x] CentOS7 使用方式 参考以下链接进行安装 安装说明文档 生成默认配置文件 $ easyctl track tail-log I1001 11:13:06.384839 126576 track.go:50] 检测到配置文件参数为空，生成配置文件样例 -> config.yaml 修改配置文件 config.yaml，修改server列表，日志文件path server: - host: 10.10.10.[1:3] username: root password: \"123456\" port: 22 excludes: - 192.168.235.132 tail-log: log-path: \"/opt/nginx/logs/access.log\" # 日志文件路径 whence: 2 # 读取位置： 0为从文件开头读取 1为相对当前位置 2为从文件结尾开始读取 offset: 200 # 当whence为1时生效，offset表示从文件第200行读取 建议使用默认值key：whence、offset 注意： 实现原理为通过协程ssh至目标机读取文件并输出，本身并不会对日志文件内容进行处理， 所以读取历史内容是无序的，如有排序需求建议使用elk等专业产品。 执行 $ easyctl track tail-log -c config.yaml Copyright © weiliang-ms 2021 all right reserved，powered by Gitbook本书发布时间： 2023-09-06 14:36:05 "}}