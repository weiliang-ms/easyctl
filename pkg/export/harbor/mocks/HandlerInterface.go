// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	logrus "github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"

	request "github.com/weiliang-ms/easyctl/pkg/util/request"

	time "time"
)

// HandlerInterface is an autogenerated mock type for the HandlerInterface type
type HandlerInterface struct {
	mock.Mock
}

// DoRequest provides a mock function with given fields: httpRequestItem
func (_m *HandlerInterface) DoRequest(httpRequestItem request.HTTPRequestItem) ([]byte, error) {
	ret := _m.Called(httpRequestItem)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(request.HTTPRequestItem) []byte); ok {
		r0 = rf(httpRequestItem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.HTTPRequestItem) error); ok {
		r1 = rf(httpRequestItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepoByPage provides a mock function with given fields: page, pageSize, user, password, schema, address, projectName, timeout
func (_m *HandlerInterface) ListRepoByPage(page int, pageSize int, user string, password string, schema string, address string, projectName string, timeout time.Duration) ([]byte, error) {
	ret := _m.Called(page, pageSize, user, password, schema, address, projectName, timeout)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(int, int, string, string, string, string, string, time.Duration) []byte); ok {
		r0 = rf(page, pageSize, user, password, schema, address, projectName, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string, string, string, string, string, time.Duration) error); ok {
		r1 = rf(page, pageSize, user, password, schema, address, projectName, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectCount provides a mock function with given fields: user, password, schema, address, timeout
func (_m *HandlerInterface) ProjectCount(user string, password string, schema string, address string, timeout time.Duration) ([]byte, error) {
	ret := _m.Called(user, password, schema, address, timeout)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, string, string, time.Duration) []byte); ok {
		r0 = rf(user, password, schema, address, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, time.Duration) error); ok {
		r1 = rf(user, password, schema, address, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectsByPage provides a mock function with given fields: page, pageSize, logger, schema, address, user, password, timeout
func (_m *HandlerInterface) ProjectsByPage(page int, pageSize int, logger *logrus.Logger, schema string, address string, user string, password string, timeout time.Duration) ([]byte, error) {
	ret := _m.Called(page, pageSize, logger, schema, address, user, password, timeout)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(int, int, *logrus.Logger, string, string, string, string, time.Duration) []byte); ok {
		r0 = rf(page, pageSize, logger, schema, address, user, password, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, *logrus.Logger, string, string, string, string, time.Duration) error); ok {
		r1 = rf(page, pageSize, logger, schema, address, user, password, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoCount provides a mock function with given fields: user, password, schema, address, projectId, timeout
func (_m *HandlerInterface) RepoCount(user string, password string, schema string, address string, projectId int, timeout time.Duration) ([]byte, error) {
	ret := _m.Called(user, password, schema, address, projectId, timeout)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, string, string, int, time.Duration) []byte); ok {
		r0 = rf(user, password, schema, address, projectId, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, int, time.Duration) error); ok {
		r1 = rf(user, password, schema, address, projectId, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagsNumWithRepo provides a mock function with given fields: user, password, schema, address, projectName, repoName, timeout
func (_m *HandlerInterface) TagsNumWithRepo(user string, password string, schema string, address string, projectName string, repoName string, timeout time.Duration) ([]byte, error) {
	ret := _m.Called(user, password, schema, address, projectName, repoName, timeout)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, time.Duration) []byte); ok {
		r0 = rf(user, password, schema, address, projectName, repoName, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, time.Duration) error); ok {
		r1 = rf(user, password, schema, address, projectName, repoName, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagsWithinRepoByPage provides a mock function with given fields: page, pageSize, schema, address, projectName, repoName, user, password, timeout
func (_m *HandlerInterface) TagsWithinRepoByPage(page int, pageSize int, schema string, address string, projectName string, repoName string, user string, password string, timeout time.Duration) ([]byte, error) {
	ret := _m.Called(page, pageSize, schema, address, projectName, repoName, user, password, timeout)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(int, int, string, string, string, string, string, string, time.Duration) []byte); ok {
		r0 = rf(page, pageSize, schema, address, projectName, repoName, user, password, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string, string, string, string, string, string, time.Duration) error); ok {
		r1 = rf(page, pageSize, schema, address, projectName, repoName, user, password, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
